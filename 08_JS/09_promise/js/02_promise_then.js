// node : 1) 비동기 기능(성능 증가)
// 예제 :
// 1번째 순서 : 서울에서 택배보냄
// console.log("서울 택배");
// 2번째 순서: 부산에서 택배보냄
// console.log("부산 택배");
// 홍길동이 개봉 순서를 서울 택배를 개봉하고 나서 부산 택배를 개봉하라고 함
// => 자바나 c언어 등은 순서대로 택배를 받을 때까지 기다리다가 실행됨
// => 장점) 순서를 지킬 수 있음
// => 단점) 서울에서 올때까지 많이 기둘려야 함(지루함)
// : 동기식 코딩이라고 함

// => 위를 개선하기 위해 비동기식 코딩이 나옴: 위의 택배를 기둘리지 않고 먼저 받은 택배를 개봉함
// => JS 는 기본적으로 웹브라우저가 비동기 코딩을 제공함(크롬, 사파리 등)
// => 장점) 서울에서 올때까지 많이 기다릴 필요없음(지루하지 않음, 빠름)
// => 단점) 순서를 지킬수 없음, 순서를 지키기 위한 방법이 필요함
// => 방법) 프라미스 함수(미리 라이브러리 함수가 제공함) + async/await 사용(개발자 코딩)

// TODO: 프라미스 제공 함수: fetch(), axios, ajax() 등에서 결과로 제공됨
// TODO: 프라미스 객체 : 이 객체는 결과가 나중에 제공된다는 것을 약속하는 객체(어음, 채권과 비슷함)
//                      이 객체는 나중에 원금을 주겠다는 것을 약속하는 문서(어음, 채권)
// TODO: 이건 개발자가 직접 코딩하지 않음, 주로 라이브러리 함수로 제공함
function getData() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve("서울 택배"); // 결과 보냄
    }, 1000);
  });
}

// then() : 결과가 정상일때 실행되는 함수, catch() : 결과가 에러일때 실행되는 함수
function show() {
  getData().then((data) => {
    console.log(data);
    console.log("부산 택배"); // 프라미스(어음) 사용했기 때문에 위의 결과 기둘림
  });
}

show(); // 함수 실행
